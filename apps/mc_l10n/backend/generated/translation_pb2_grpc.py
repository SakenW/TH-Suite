# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import translation_pb2 as translation__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in translation_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TranslationServiceStub(object):
    """API服务定义

    翻译服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTranslations = channel.unary_unary(
                '/mc_l10n.TranslationService/GetTranslations',
                request_serializer=translation__pb2.GetTranslationsRequest.SerializeToString,
                response_deserializer=translation__pb2.GetTranslationsResponse.FromString,
                _registered_method=True)
        self.UpdateTranslations = channel.unary_unary(
                '/mc_l10n.TranslationService/UpdateTranslations',
                request_serializer=translation__pb2.TranslationBatch.SerializeToString,
                response_deserializer=translation__pb2.UpdateTranslationsResponse.FromString,
                _registered_method=True)
        self.SyncTranslations = channel.unary_stream(
                '/mc_l10n.TranslationService/SyncTranslations',
                request_serializer=translation__pb2.SyncRequest.SerializeToString,
                response_deserializer=translation__pb2.SyncResponse.FromString,
                _registered_method=True)
        self.GetStatistics = channel.unary_unary(
                '/mc_l10n.TranslationService/GetStatistics',
                request_serializer=translation__pb2.StatisticsRequest.SerializeToString,
                response_deserializer=translation__pb2.StatisticsResponse.FromString,
                _registered_method=True)


class TranslationServiceServicer(object):
    """API服务定义

    翻译服务
    """

    def GetTranslations(self, request, context):
        """获取翻译条目
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTranslations(self, request, context):
        """批量更新翻译
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncTranslations(self, request, context):
        """同步翻译数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatistics(self, request, context):
        """获取统计信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TranslationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTranslations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTranslations,
                    request_deserializer=translation__pb2.GetTranslationsRequest.FromString,
                    response_serializer=translation__pb2.GetTranslationsResponse.SerializeToString,
            ),
            'UpdateTranslations': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTranslations,
                    request_deserializer=translation__pb2.TranslationBatch.FromString,
                    response_serializer=translation__pb2.UpdateTranslationsResponse.SerializeToString,
            ),
            'SyncTranslations': grpc.unary_stream_rpc_method_handler(
                    servicer.SyncTranslations,
                    request_deserializer=translation__pb2.SyncRequest.FromString,
                    response_serializer=translation__pb2.SyncResponse.SerializeToString,
            ),
            'GetStatistics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatistics,
                    request_deserializer=translation__pb2.StatisticsRequest.FromString,
                    response_serializer=translation__pb2.StatisticsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mc_l10n.TranslationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mc_l10n.TranslationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TranslationService(object):
    """API服务定义

    翻译服务
    """

    @staticmethod
    def GetTranslations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mc_l10n.TranslationService/GetTranslations',
            translation__pb2.GetTranslationsRequest.SerializeToString,
            translation__pb2.GetTranslationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTranslations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mc_l10n.TranslationService/UpdateTranslations',
            translation__pb2.TranslationBatch.SerializeToString,
            translation__pb2.UpdateTranslationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SyncTranslations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mc_l10n.TranslationService/SyncTranslations',
            translation__pb2.SyncRequest.SerializeToString,
            translation__pb2.SyncResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mc_l10n.TranslationService/GetStatistics',
            translation__pb2.StatisticsRequest.SerializeToString,
            translation__pb2.StatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FileServiceStub(object):
    """文件服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScanFiles = channel.unary_stream(
                '/mc_l10n.FileService/ScanFiles',
                request_serializer=translation__pb2.ScanRequest.SerializeToString,
                response_deserializer=translation__pb2.ScanResponse.FromString,
                _registered_method=True)
        self.UploadChunk = channel.unary_unary(
                '/mc_l10n.FileService/UploadChunk',
                request_serializer=translation__pb2.DataChunk.SerializeToString,
                response_deserializer=translation__pb2.ChunkResponse.FromString,
                _registered_method=True)
        self.DownloadChunk = channel.unary_unary(
                '/mc_l10n.FileService/DownloadChunk',
                request_serializer=translation__pb2.DownloadChunkRequest.SerializeToString,
                response_deserializer=translation__pb2.DataChunk.FromString,
                _registered_method=True)


class FileServiceServicer(object):
    """文件服务
    """

    def ScanFiles(self, request, context):
        """扫描文件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadChunk(self, request, context):
        """上传文件分块
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadChunk(self, request, context):
        """下载文件分块
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ScanFiles': grpc.unary_stream_rpc_method_handler(
                    servicer.ScanFiles,
                    request_deserializer=translation__pb2.ScanRequest.FromString,
                    response_serializer=translation__pb2.ScanResponse.SerializeToString,
            ),
            'UploadChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadChunk,
                    request_deserializer=translation__pb2.DataChunk.FromString,
                    response_serializer=translation__pb2.ChunkResponse.SerializeToString,
            ),
            'DownloadChunk': grpc.unary_unary_rpc_method_handler(
                    servicer.DownloadChunk,
                    request_deserializer=translation__pb2.DownloadChunkRequest.FromString,
                    response_serializer=translation__pb2.DataChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mc_l10n.FileService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mc_l10n.FileService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FileService(object):
    """文件服务
    """

    @staticmethod
    def ScanFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mc_l10n.FileService/ScanFiles',
            translation__pb2.ScanRequest.SerializeToString,
            translation__pb2.ScanResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mc_l10n.FileService/UploadChunk',
            translation__pb2.DataChunk.SerializeToString,
            translation__pb2.ChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DownloadChunk(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mc_l10n.FileService/DownloadChunk',
            translation__pb2.DownloadChunkRequest.SerializeToString,
            translation__pb2.DataChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CacheServiceStub(object):
    """缓存服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCache = channel.unary_unary(
                '/mc_l10n.CacheService/GetCache',
                request_serializer=translation__pb2.CacheGetRequest.SerializeToString,
                response_deserializer=translation__pb2.CacheGetResponse.FromString,
                _registered_method=True)
        self.SetCache = channel.unary_unary(
                '/mc_l10n.CacheService/SetCache',
                request_serializer=translation__pb2.CacheSetRequest.SerializeToString,
                response_deserializer=translation__pb2.CacheSetResponse.FromString,
                _registered_method=True)
        self.ClearCache = channel.unary_unary(
                '/mc_l10n.CacheService/ClearCache',
                request_serializer=translation__pb2.CacheClearRequest.SerializeToString,
                response_deserializer=translation__pb2.CacheClearResponse.FromString,
                _registered_method=True)


class CacheServiceServicer(object):
    """缓存服务
    """

    def GetCache(self, request, context):
        """获取缓存
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCache(self, request, context):
        """设置缓存
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCache(self, request, context):
        """清理缓存
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CacheServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCache': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCache,
                    request_deserializer=translation__pb2.CacheGetRequest.FromString,
                    response_serializer=translation__pb2.CacheGetResponse.SerializeToString,
            ),
            'SetCache': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCache,
                    request_deserializer=translation__pb2.CacheSetRequest.FromString,
                    response_serializer=translation__pb2.CacheSetResponse.SerializeToString,
            ),
            'ClearCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCache,
                    request_deserializer=translation__pb2.CacheClearRequest.FromString,
                    response_serializer=translation__pb2.CacheClearResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mc_l10n.CacheService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mc_l10n.CacheService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CacheService(object):
    """缓存服务
    """

    @staticmethod
    def GetCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mc_l10n.CacheService/GetCache',
            translation__pb2.CacheGetRequest.SerializeToString,
            translation__pb2.CacheGetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mc_l10n.CacheService/SetCache',
            translation__pb2.CacheSetRequest.SerializeToString,
            translation__pb2.CacheSetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClearCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mc_l10n.CacheService/ClearCache',
            translation__pb2.CacheClearRequest.SerializeToString,
            translation__pb2.CacheClearResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
