name: Release Build

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  RUST_VERSION: 'stable'

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=v$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          fi
          
      - name: Create Release
        id: create_release
        if: github.event_name != 'release'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: TransHub Suite ${{ steps.version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            ## TransHub Suite ${{ steps.version.outputs.version }}
            
            ### 🚀 新功能
            - 待补充
            
            ### 🐛 修复
            - 待补充
            
            ### 🔧 改进
            - 待补充
            
            ### 📦 下载说明
            - **Windows**: 下载 `TransHub-Suite-${{ steps.version.outputs.version }}-x64-setup.exe`
            - **macOS**: 下载 `TransHub-Suite-${{ steps.version.outputs.version }}.app.tar.gz`
            - **Linux**: 下载 `TransHub-Suite-${{ steps.version.outputs.version }}.AppImage`
            
            ### 🔍 校验和
            文件校验和请参考 `checksums.txt`

  build-tauri:
    name: Build Tauri Apps
    needs: prepare-release
    strategy:
      matrix:
        platform: [ubuntu-20.04, windows-latest, macos-latest]
        app: [mc_l10n]
    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          
      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf
            
      - name: Install frontend dependencies
        run: |
          cd apps/${{ matrix.app }}/frontend
          pnpm install --frozen-lockfile
          
      - name: Install backend dependencies
        run: poetry install --no-interaction
        
      - name: Update app version
        run: |
          cd apps/${{ matrix.app }}/frontend/src-tauri
          # 更新 tauri.conf.json 中的版本号
          VERSION="${{ needs.prepare-release.outputs.version }}"
          VERSION=${VERSION#v}  # 移除 v 前缀
          python -c "
          import json
          with open('tauri.conf.json', 'r') as f:
              config = json.load(f)
          config['package']['version'] = '$VERSION'
          with open('tauri.conf.json', 'w') as f:
              json.dump(config, f, indent=2)
          "
          
      - name: Build Tauri app
        run: |
          cd apps/${{ matrix.app }}/frontend
          pnpm tauri build
          
      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.upload_url }}
          asset_path: ./apps/${{ matrix.app }}/frontend/src-tauri/target/release/bundle/nsis/TransHub Suite_${{ needs.prepare-release.outputs.version }}_x64-setup.exe
          asset_name: TransHub-Suite-${{ matrix.app }}-${{ needs.prepare-release.outputs.version }}-x64-setup.exe
          asset_content_type: application/octet-stream
          
      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          cd apps/${{ matrix.app }}/frontend/src-tauri/target/release/bundle/macos
          tar -czf TransHub-Suite-${{ matrix.app }}-${{ needs.prepare-release.outputs.version }}.app.tar.gz *.app
        continue-on-error: true
        
      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-20.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.upload_url }}
          asset_path: ./apps/${{ matrix.app }}/frontend/src-tauri/target/release/bundle/appimage/TransHub Suite_${{ needs.prepare-release.outputs.version }}_amd64.AppImage
          asset_name: TransHub-Suite-${{ matrix.app }}-${{ needs.prepare-release.outputs.version }}.AppImage
          asset_content_type: application/octet-stream
        continue-on-error: true

  generate-checksums:
    name: Generate Checksums
    needs: [prepare-release, build-tauri]
    runs-on: ubuntu-latest
    if: always() && needs.build-tauri.result == 'success'
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate checksums
        run: |
          echo "# TransHub Suite ${{ needs.prepare-release.outputs.version }} - 文件校验和" > checksums.txt
          echo "" >> checksums.txt
          find . -name "*.exe" -o -name "*.AppImage" -o -name "*.tar.gz" | while read file; do
            if [[ -f "$file" ]]; then
              echo "## $(basename "$file")" >> checksums.txt
              echo "\`\`\`" >> checksums.txt
              sha256sum "$file" >> checksums.txt
              echo "\`\`\`" >> checksums.txt
              echo "" >> checksums.txt
            fi
          done
          
      - name: Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain
        continue-on-error: true

  notify-completion:
    name: Notify Release Completion
    needs: [prepare-release, build-tauri, generate-checksums]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Release summary
        run: |
          echo "🎉 TransHub Suite ${{ needs.prepare-release.outputs.version }} 发布完成！"
          echo ""
          echo "📋 构建状态："
          echo "- Tauri 应用构建: ${{ needs.build-tauri.result }}"
          echo "- 校验和生成: ${{ needs.generate-checksums.result }}"
          echo ""
          if [[ "${{ needs.build-tauri.result }}" == "success" ]]; then
            echo "✅ 发布成功！请检查 GitHub Releases 页面获取下载链接。"
          else
            echo "❌ 发布过程中出现问题，请检查构建日志。"
          fi