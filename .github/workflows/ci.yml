name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'
  POETRY_VERSION: '1.7.1'

jobs:
  python-lint-and-test:
    name: Python Lint & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached Poetry dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        
      - name: Install project
        run: poetry install --no-interaction
        
      - name: Run Python linting (ruff)
        run: poetry run ruff check . --output-format=github
        
      - name: Run Python formatting check (ruff)
        run: poetry run ruff format --check .
        
      - name: Run type checking (mypy)
        run: poetry run mypy packages apps --ignore-missing-imports
        continue-on-error: true  # 暂时允许类型检查失败
        
      - name: Run Python tests
        run: poetry run pytest --cov=packages --cov-report=xml --cov-report=term-missing
        continue-on-error: true  # 暂时允许测试失败
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: python
          name: python-coverage
          fail_ci_if_error: false

  frontend-lint-and-test:
    name: Frontend Lint & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20']
        app: ['mc_l10n']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install frontend dependencies
        run: |
          cd apps/${{ matrix.app }}/frontend
          pnpm install --frozen-lockfile
          
      - name: Run frontend linting (ESLint)
        run: |
          cd apps/${{ matrix.app }}/frontend
          pnpm lint
        continue-on-error: true  # 暂时允许lint失败
        
      - name: Run frontend type checking
        run: |
          cd apps/${{ matrix.app }}/frontend
          pnpm type-check
        continue-on-error: true  # 暂时允许类型检查失败
        
      - name: Run frontend formatting check
        run: |
          cd apps/${{ matrix.app }}/frontend
          pnpm format:check
          
      - name: Build frontend
        run: |
          cd apps/${{ matrix.app }}/frontend
          pnpm build

  dependency-security-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Install dependencies
        run: poetry install --no-interaction
        
      - name: Run Python security audit
        run: poetry run pip-audit --format=json --output=python-audit.json
        continue-on-error: true
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          
      - name: Run npm security audit
        run: |
          cd apps/mc_l10n/frontend
          pnpm audit --audit-level high
        continue-on-error: true
        
      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: python-audit.json
        continue-on-error: true

  code-quality-check:
    name: Code Quality & Architecture Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Install dependencies
        run: poetry install --no-interaction
        
      - name: Check architecture boundaries (Python)
        run: |
          echo "检查架构边界和依赖关系..."
          # 使用import-linter检查Python架构约束
          pip install import-linter
          echo "Python架构检查暂时跳过，需要配置import-linter规则"
        continue-on-error: true
        
      - name: Check code complexity
        run: |
          echo "检查代码复杂度..."
          poetry run ruff check . --select=C90 --show-source
        continue-on-error: true
        
      - name: Check for TODO/FIXME comments
        run: |
          echo "检查待办事项和修复标记..."
          grep -r "TODO\|FIXME\|HACK\|XXX" --include="*.py" --include="*.ts" --include="*.tsx" . || true

  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [python-lint-and-test, frontend-lint-and-test, dependency-security-check, code-quality-check]
    if: always()
    
    steps:
      - name: Check build status
        run: |
          echo "Python Lint & Test: ${{ needs.python-lint-and-test.result }}"
          echo "Frontend Lint & Test: ${{ needs.frontend-lint-and-test.result }}"
          echo "Security Check: ${{ needs.dependency-security-check.result }}"
          echo "Quality Check: ${{ needs.code-quality-check.result }}"
          
          # 如果核心检查失败，标记为失败
          if [[ "${{ needs.python-lint-and-test.result }}" == "failure" ]]; then
            echo "Python检查失败，CI失败"
            exit 1
          fi
          
          if [[ "${{ needs.frontend-lint-and-test.result }}" == "failure" ]]; then
            echo "前端检查失败，CI失败"
            exit 1
          fi
          
          echo "CI检查通过！"